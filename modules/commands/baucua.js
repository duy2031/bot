const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "baucua",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "duydz",
  description: "Game b·∫ßu cua nhi·ªÅu ng∆∞·ªùi ch∆°i",
  commandCategory: "game",
  usages: "baucua [cr|info|out|l·∫Øc]",
  cooldowns: 5,
};

const dataPath = __dirname + "/cache/baucua.json";
let rooms = fs.existsSync(dataPath) ? JSON.parse(fs.readFileSync(dataPath)) : {};
const choices = ["t√¥m", "b·∫ßu", "cua", "c√°", "g√†", "nai"];

module.exports.handleEvent = async ({ api, event, Currencies }) => {
  const { threadID, senderID, body, messageID } = event;
  if (!body) return;
  const msg = body.toLowerCase().trim();

  // B·∫Øt c∆∞·ª£c: v√≠ d·ª• "b·∫ßu 1000" ho·∫∑c "c√° 2000"
  const betMatch = msg.match(/^(t√¥m|b·∫ßu|cua|c√°|g√†|nai)\s+(\d+)$/i);
  if (!betMatch) return;

  const choice = betMatch[1].toLowerCase();
  const bet = parseInt(betMatch[2]);
  if (isNaN(bet) || bet < 1000)
    return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 1000 ƒë!", threadID, messageID);

  const userMoney = (await Currencies.getData(senderID)).money;
  const room = rooms[threadID];
  if (!room)
    return api.sendMessage("Ch∆∞a c√≥ ph√≤ng b·∫ßu cua! D√πng 'baucua cr' ƒë·ªÉ t·∫°o ph√≤ng.", threadID, messageID);

  room.players = room.players || {};

  if (room.players[senderID]) {
    // Ho√†n ti·ªÅn c∆∞·ª£c c≈© n·∫øu c∆∞·ª£c l·∫°i
    const oldBets = room.players[senderID].bets;
    for (const k in oldBets) {
      await Currencies.increaseMoney(senderID, oldBets[k]);
    }
  }

  // Ki·ªÉm tra ƒë·ªß ti·ªÅn
  if (userMoney < bet)
    return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c s·ªë ti·ªÅn n√†y!", threadID, messageID);

  await Currencies.decreaseMoney(senderID, bet);

  room.players[senderID] = room.players[senderID] || { bets: {} };
  room.players[senderID].bets[choice] = (room.players[senderID].bets[choice] || 0) + bet;

  fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));

  return api.sendMessage(
    `‚úÖ B·∫°n ƒë√£ c∆∞·ª£c: ${choice.toUpperCase()} - ${bet} ƒë!\n(B·∫°n c√≥ th·ªÉ c∆∞·ª£c th√™m ho·∫∑c ƒë·ªïi c∆∞·ª£c kh√°c tr∆∞·ªõc khi l·∫Øc)`,
    threadID,
    messageID
  );
};

module.exports.run = async ({ api, event, args, Currencies }) => {
  const { threadID, senderID, messageID } = event;
  const action = args[0];

  if (!action)
    return api.sendMessage("‚ö†Ô∏è D√πng: baucua [cr|info|out|l·∫Øc]", threadID, messageID);

  switch (action) {
    case "cr": {
      if (rooms[threadID])
        return api.sendMessage("ƒê√£ c√≥ ph√≤ng b·∫ßu cua trong nh√≥m n√†y!", threadID, messageID);
      rooms[threadID] = { players: {} };
      fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));
      return api.sendMessage(
        "‚úÖ T·∫°o ph√≤ng b·∫ßu cua th√†nh c√¥ng!\nG·ª≠i 'b·∫ßu 1000' ho·∫∑c 'c√° 2000' ƒë·ªÉ c∆∞·ª£c!",
        threadID,
        messageID
      );
    }

    case "info": {
      const room = rooms[threadID];
      if (!room)
        return api.sendMessage("‚ùå Kh√¥ng c√≥ ph√≤ng b·∫ßu cua n√†o trong nh√≥m!", threadID, messageID);

      const players = room.players || {};
      let msg = "üéÆ Danh s√°ch ng∆∞·ªùi ch∆°i ƒë√£ c∆∞·ª£c:\n";
      for (const id in players) {
        const name = (await api.getUserInfo(id))[id].name;
        const bets = players[id].bets;
        msg += `- ${name}:\n`;
        for (const item in bets) {
          msg += `    ‚Ä¢ ${item.toUpperCase()}: ${bets[item]} ƒë\n`;
        }
      }
      return api.sendMessage(msg, threadID, messageID);
    }

    case "out": {
      const room = rooms[threadID];
      if (!room || !room.players[senderID])
        return api.sendMessage("‚ùå B·∫°n ch∆∞a tham gia ph√≤ng b·∫ßu cua!", threadID, messageID);

      // Ho√†n ti·ªÅn c∆∞·ª£c
      const bets = room.players[senderID].bets;
      for (const k in bets) {
        await Currencies.increaseMoney(senderID, bets[k]);
      }

      delete room.players[senderID];
      fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));
      return api.sendMessage("‚úÖ B·∫°n ƒë√£ r·ªùi ph√≤ng v√† ƒë∆∞·ª£c ho√†n l·∫°i ti·ªÅn c∆∞·ª£c!", threadID, messageID);
    }

    case "l·∫Øc": {
      const room = rooms[threadID];
      if (!room)
        return api.sendMessage("‚ùå Kh√¥ng c√≥ ph√≤ng b·∫ßu cua trong nh√≥m!", threadID, messageID);

      if (Object.keys(room.players).length === 0)
        return api.sendMessage("‚ö†Ô∏è Kh√¥ng c√≥ ai c∆∞·ª£c trong ph√≤ng!", threadID, messageID);

      if (room.result)
        return api.sendMessage(
          "‚ö†Ô∏è Ph√≤ng ƒë√£ l·∫Øc! D√πng 'baucua cr' ƒë·ªÉ t·∫°o l·∫°i n·∫øu mu·ªën ch∆°i ti·∫øp.",
          threadID,
          messageID
        );

      // X√∫c x·∫Øc
      const xucxac = [
        choices[Math.floor(Math.random() * choices.length)],
        choices[Math.floor(Math.random() * choices.length)],
        choices[Math.floor(Math.random() * choices.length)],
      ];

      room.result = { faces: xucxac };
      fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));

      await api.sendMessage("üé≤ ƒêang l·∫Øc, ƒë·ª£i t√≠...", threadID);

      setTimeout(async () => {
        const faceCount = {};
        xucxac.forEach((f) => (faceCount[f] = (faceCount[f] || 0) + 1));

        const attachments = [];
        try {
          for (const face of xucxac) {
            const imgPath = path.join(__dirname, "cache/baucua", `${face}.jpg`);
            if (fs.existsSync(imgPath)) {
              attachments.push(fs.createReadStream(imgPath));
            }
          }
        } catch (e) {
          console.log("‚ùå L·ªói ƒë·ªçc ·∫£nh:", e.message);
        }

        let msg = `üé≤ K·∫øt qu·∫£: ${xucxac.map((f) => f.toUpperCase()).join(" - ")}\n\n`;
        msg += "üéØ Danh s√°ch ng∆∞·ªùi ch∆°i v√† c∆∞·ª£c:\n";

        for (const id in room.players) {
          const name = (await api.getUserInfo(id))[id].name;
          const bets = room.players[id].bets;
          msg += `- ${name}:\n`;
          for (const item in bets) {
            msg += `    ‚Ä¢ ${item.toUpperCase()}: ${bets[item]} ƒë\n`;
          }
        }

        msg += `\nüéâ K·∫øt qu·∫£ tr·∫£ th∆∞·ªüng:\n`;

        for (const id in room.players) {
          const name = (await api.getUserInfo(id))[id].name;
          const bets = room.players[id].bets;
          let totalWin = 0;
          for (const item in bets) {
            if (faceCount[item]) {
              totalWin += bets[item] * faceCount[item];
            }
          }
          if (totalWin > 0) {
            await Currencies.increaseMoney(id, totalWin);
            msg += `- ${name}: +${totalWin} ƒë\n`;
          } else {
            msg += `- ${name}: Thua s·∫°ch üò¢\n`;
          }
        }

        delete rooms[threadID];
        fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));
        return api.sendMessage({ body: msg, attachment: attachments }, threadID);
      }, 1500);
      break;
    }

    default:
      return api.sendMessage("‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá! D√πng: baucua [cr|info|out|l·∫Øc]", threadID, messageID);
  }
};

const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "taixiu",
  version: "1.3.2",
  hasPermssion: 0,
  credits: "duydz ",
  description: "T√†i x·ªâu nhi·ªÅu ng∆∞·ªùi",
  commandCategory: "game",
  usages: "taixiu [cr|info|out|x·ªï]",
  cooldowns: 5,
};

const dataPath = __dirname + "/cache/taixiu.json";
let rooms = fs.existsSync(dataPath) ? JSON.parse(fs.readFileSync(dataPath)) : {};

module.exports.handleEvent = async ({ api, event, Currencies }) => {
  const { threadID, senderID, body, messageID } = event;
  const msg = body.toLowerCase().trim();
  const betMatch = msg.match(/(t√†i|tai|x·ªâu|xiu)\s+(allin|all|\d+)/i);

  if (betMatch) {
    const choice = betMatch[1].startsWith("t√†i") ? "t√†i" : "x·ªâu";
    const room = rooms[threadID];
    if (!room) return api.sendMessage("Ch∆∞a c√≥ ph√≤ng! D√πng 'taixiu cr' ƒë·ªÉ t·∫°o ph√≤ng.", threadID, messageID);

    const userMoney = (await Currencies.getData(senderID)).money;
    room.players = room.players || {};

    let bet;
    if (["all", "allin"].includes(betMatch[2].toLowerCase())) {
      bet = userMoney + (room.players[senderID]?.bet || 0);
    } else {
      bet = parseInt(betMatch[2]);
    }

    if (isNaN(bet) || bet < 1000)
      return api.sendMessage("‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 1000!", threadID, messageID);

    if (userMoney + (room.players[senderID]?.bet || 0) < bet)
      return api.sendMessage("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c s·ªë ti·ªÅn n√†y!", threadID, messageID);

    if (room.players[senderID]) {
      const oldBet = room.players[senderID].bet;
      await Currencies.increaseMoney(senderID, oldBet);
    }

    await Currencies.decreaseMoney(senderID, bet);
    room.players[senderID] = { choice, bet };

    fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));

    return api.sendMessage(
      `‚úÖ ƒê·∫∑t c∆∞·ª£c: ${choice.toUpperCase()} - ${bet.toLocaleString()} ƒë${["all", "allin"].includes(betMatch[2].toLowerCase()) ? " (ALL-IN)" : ""}\n(B·∫°n c√≥ th·ªÉ ƒë·ªïi l·∫°i tr∆∞·ªõc khi 'x·ªï')`,
      threadID,
      messageID
    );
  }
};

module.exports.run = async ({ api, event, args, Currencies }) => {
  const { threadID, senderID, messageID } = event;
  const action = args[0];

  if (!action) return api.sendMessage("‚ö†Ô∏è D√πng: taixiu [cr|info|out|x·ªï]", threadID, messageID);

  switch (action) {
    case "cr": {
      if (rooms[threadID]) return api.sendMessage("‚ùå ƒê√£ c√≥ ph√≤ng t√†i x·ªâu trong nh√≥m!", threadID, messageID);
      rooms[threadID] = { players: {} };
      fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));
      return api.sendMessage("‚úÖ T·∫°o ph√≤ng t√†i x·ªâu th√†nh c√¥ng!\nG·ª≠i 't√†i <ti·ªÅn>' ho·∫∑c 'x·ªâu <ti·ªÅn>' ƒë·ªÉ tham gia.", threadID, messageID);
    }

    case "info": {
      const room = rooms[threadID];
      if (!room) return api.sendMessage("‚ùå Kh√¥ng c√≥ ph√≤ng t√†i x·ªâu n√†o trong nh√≥m!", threadID, messageID);
      const players = room.players || {};
      if (Object.keys(players).length === 0)
        return api.sendMessage("‚ö†Ô∏è Ch∆∞a c√≥ ai ƒë·∫∑t c∆∞·ª£c!", threadID, messageID);

      let msg = "üéÆ Danh s√°ch c∆∞·ª£c:\n";
      for (const id in players) {
        const name = (await api.getUserInfo(id))[id].name;
        msg += `- ${name}: ${players[id].choice.toUpperCase()} - ${players[id].bet.toLocaleString()} ƒë\n`;
      }
      return api.sendMessage(msg, threadID, messageID);
    }

    case "out": {
      const room = rooms[threadID];
      if (!room || !room.players[senderID])
        return api.sendMessage("‚ùå B·∫°n ch∆∞a tham gia c∆∞·ª£c!", threadID, messageID);

      const refund = room.players[senderID].bet;
      await Currencies.increaseMoney(senderID, refund);
      delete room.players[senderID];
      fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));
      return api.sendMessage("‚úÖ R·ªùi ph√≤ng v√† ho√†n l·∫°i ti·ªÅn c∆∞·ª£c!", threadID, messageID);
    }

    case "x·ªï": {
      const room = rooms[threadID];
      if (!room)
        return api.sendMessage("‚ùå Kh√¥ng c√≥ ph√≤ng t√†i x·ªâu trong nh√≥m!", threadID, messageID);
      if (Object.keys(room.players).length === 0)
        return api.sendMessage("‚ö†Ô∏è Ch∆∞a c√≥ ai ƒë·∫∑t c∆∞·ª£c!", threadID, messageID);
      if (room.result)
        return api.sendMessage("‚ö†Ô∏è Ph√≤ng ƒë√£ x·ªï r·ªìi! D√πng 'taixiu cr' ƒë·ªÉ t·∫°o m·ªõi.", threadID, messageID);

      room.result = { pending: true };
      fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));

      const num1 = Math.floor(Math.random() * 6) + 1;
      const num2 = Math.floor(Math.random() * 6) + 1;
      const num3 = Math.floor(Math.random() * 6) + 1;
      const total = num1 + num2 + num3;
      const result = total <= 10 ? "x·ªâu" : "t√†i";

      room.result = { num1, num2, num3, total, result };
      fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));

      await api.sendMessage("üé≤ ƒêang l·∫Øc x√∫c x·∫Øc, vui l√≤ng ch·ªù...", threadID);

      setTimeout(async () => {
        const players = room.players;
        const attachments = [];

       try {
          attachments.push(fs.createReadStream(path.join(__dirname, "cache/dice", `${num1}.jpg`)));
          attachments.push(fs.createReadStream(path.join(__dirname, "cache/dice", `${num2}.jpg`)));
          attachments.push(fs.createReadStream(path.join(__dirname, "cache/dice", `${num3}.jpg`)));
        } catch (e) {
          console.log("‚ùå L·ªói ƒë·ªçc ·∫£nh x√∫c x·∫Øc:", e.message);
        }

        let msg = `üé≤ K·∫øt qu·∫£: ${num1} + ${num2} + ${num3} = ${total} (${result.toUpperCase()})\n\n‚úÖ T√†i:\n`;
        for (const id in players) {
          if (players[id].choice === "t√†i") {
            const name = (await api.getUserInfo(id))[id].name;
            const { bet } = players[id];
            msg += `- ${name} ${result === "t√†i" ? `+${bet * 2}` : `-${bet}`}\n`;
          }
        }

        msg += `\n‚úÖ X·ªâu:\n`;
        for (const id in players) {
          if (players[id].choice === "x·ªâu") {
            const name = (await api.getUserInfo(id))[id].name;
            const { bet } = players[id];
            msg += `- ${name} ${result === "x·ªâu" ? `+${bet * 2}` : `-${bet}`}\n`;
          }
        }

        // Tr·∫£ th∆∞·ªüng
        for (const id in players) {
          if (players[id].choice === result) {
            await Currencies.increaseMoney(id, players[id].bet * 2);
          }
        }

        // X√≥a ph√≤ng sau khi x·ªï
        delete rooms[threadID];
        fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));

        return api.sendMessage({ body: msg, attachment: attachments }, threadID);
      }, 1500); // Delay m√¥ ph·ªèng "ƒëang l·∫Øc"
      break;
    }

    default:
      return api.sendMessage("‚ö†Ô∏è D√πng: taixiu [cr|info|out|x·ªï]", threadID, messageID);
  }
};

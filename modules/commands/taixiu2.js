const fs = require("fs");

module.exports.config = {
  name: "taixiu",
  version: "1.3.0",
  hasPermssion: 0,
  credits: "60fps",
  description: "T√†i x·ªâu nhi·ªÅu ng∆∞·ªùi",
  commandCategory: "game",
  usages: "tx [cr|info|out|x·ªï]",
  cooldowns: 5,
};

const dataPath = __dirname + "/cache/taixiu.json";
let rooms = fs.existsSync(dataPath) ? JSON.parse(fs.readFileSync(dataPath)) : {};

module.exports.handleEvent = async ({ api, event, Currencies }) => {
  const { threadID, senderID, body, messageID } = event;
  const msg = body.toLowerCase().trim();
  const betMatch = msg.match(/(t√†i|tai|x·ªâu|xiu)\s+(\d+)/i);

  if (betMatch) {
    const choice = betMatch[1].startsWith("t√†i") ? "t√†i" : "x·ªâu";
    const bet = parseInt(betMatch[2]);
    if (isNaN(bet) || bet < 1000) return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 1000!", threadID, messageID);

    const userMoney = (await Currencies.getData(senderID)).money;
    const room = rooms[threadID];
    if (!room) return api.sendMessage("Ch∆∞a c√≥ ph√≤ng! H√£y d√πng 'tx cr' ƒë·ªÉ t·∫°o ph√≤ng tr∆∞·ªõc.", threadID, messageID);

    room.players = room.players || {};

    // N·∫øu ƒë√£ c∆∞·ª£c tr∆∞·ªõc ƒë√≥, ho√†n ti·ªÅn c≈©
    if (room.players[senderID]) {
      const oldBet = room.players[senderID].bet;
      await Currencies.increaseMoney(senderID, oldBet);
    }

    // Ki·ªÉm tra ƒë·ªß ti·ªÅn cho c∆∞·ª£c m·ªõi
    if (userMoney + (room.players[senderID]?.bet || 0) < bet)
      return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c s·ªë ti·ªÅn n√†y!", threadID, messageID);

    // Tr·ª´ ti·ªÅn m·ªõi
    await Currencies.decreaseMoney(senderID, bet);

    // C·∫≠p nh·∫≠t th√¥ng tin c∆∞·ª£c
    room.players[senderID] = { choice, bet };
    fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));

    return api.sendMessage(`‚úÖ ƒê√£ ƒë·∫∑t c∆∞·ª£c: ${choice.toUpperCase()} - ${bet}!\n(B·∫°n c√≥ th·ªÉ ƒë·ªïi l·∫°i b·∫•t c·ª© l√∫c n√†o)`, threadID, messageID);
  }
};

module.exports.run = async ({ api, event, args, Currencies }) => {
  const { threadID, senderID, messageID } = event;
  const action = args[0];

  if (action === "cr") {
    if (rooms[threadID]) return api.sendMessage("Ph√≤ng ƒë√£ t·ªìn t·∫°i!", threadID, messageID);
    rooms[threadID] = { creator: senderID, players: {} };
    fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));
    return api.sendMessage("‚úÖ Ph√≤ng t√†i x·ªâu ƒë√£ ƒë∆∞·ª£c t·∫°o!\nNg∆∞·ªùi ch∆°i ch·ªâ c·∫ßn nh·∫Øn: t√†i [ti·ªÅn] ho·∫∑c x·ªâu [ti·ªÅn] ƒë·ªÉ tham gia.", threadID, messageID);
  }

  if (action === "info") {
    const room = rooms[threadID];
    if (!room) return api.sendMessage("Ph√≤ng ch∆∞a ƒë∆∞·ª£c t·∫°o!", threadID, messageID);
    let msg = `üéÆ Ph√≤ng t√†i x·ªâu:\n- Ch·ªß ph√≤ng: ${(await api.getUserInfo(room.creator))[room.creator].name}`;
    if (!room.players || Object.keys(room.players).length === 0) msg += `\n- Ch∆∞a c√≥ ng∆∞·ªùi tham gia.`;
    else {
      msg += `\n- Ng∆∞·ªùi ch∆°i:`;
      for (const id in room.players) {
        const name = (await api.getUserInfo(id))[id].name;
        const { choice, bet } = room.players[id];
        msg += `\n+ ${name}: ${choice.toUpperCase()} - ${bet}`;
      }
    }
    return api.sendMessage(msg, threadID, messageID);
  }

  if (action === "out") {
    const room = rooms[threadID];
    if (!room || !room.players?.[senderID])
      return api.sendMessage("B·∫°n ch∆∞a tham gia ph√≤ng!", threadID, messageID);

    // Ho√†n ti·ªÅn khi r·ªùi ph√≤ng
    await Currencies.increaseMoney(senderID, room.players[senderID].bet);
    delete room.players[senderID];
    fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));
    return api.sendMessage("‚úÖ B·∫°n ƒë√£ r·ªùi ph√≤ng v√† ƒë∆∞·ª£c ho√†n ti·ªÅn!", threadID, messageID);
  }

  if (action === "x·ªï") {
    const room = rooms[threadID];
    if (!room) return api.sendMessage("Ph√≤ng ch∆∞a ƒë∆∞·ª£c t·∫°o!", threadID, messageID);
    if (senderID !== room.creator) return api.sendMessage("Ch·ªâ ch·ªß ph√≤ng m·ªõi ƒë∆∞·ª£c x·ªï!", threadID, messageID);
    if (!room.players || Object.keys(room.players).length === 0)
      return api.sendMessage("Ph√≤ng ch∆∞a c√≥ ng∆∞·ªùi tham gia!", threadID, messageID);

    // X·ªï 3 s·ªë random
    const num1 = Math.floor(Math.random() * 6) + 1;
    const num2 = Math.floor(Math.random() * 6) + 1;
    const num3 = Math.floor(Math.random() * 6) + 1;
    const total = num1 + num2 + num3;
    const result = total <= 10 ? "x·ªâu" : "t√†i";

    let winners = [], losers = [];
    for (const id in room.players) {
      if (room.players[id].choice === result) winners.push(id);
      else losers.push(id);
    }

    // X·ª≠ l√Ω th∆∞·ªüng
    for (const id of winners) {
      await Currencies.increaseMoney(id, room.players[id].bet * 2);
    }

    // K·∫øt qu·∫£
    let msg = `üé≤ K·∫øt qu·∫£: ${num1} + ${num2} + ${num3} = ${total} (${result.toUpperCase()})\n\n`;
    msg += `‚úÖ T√†i:\n`;
    for (const id in room.players) {
      if (room.players[id].choice === "t√†i") {
        const name = (await api.getUserInfo(id))[id].name;
        const { bet } = room.players[id];
        msg += `- ${name} ${result === "t√†i" ? `+${bet * 2}` : `-${bet}`}\n`;
      }
    }
    msg += `\n‚úÖ X·ªâu:\n`;
    for (const id in room.players) {
      if (room.players[id].choice === "x·ªâu") {
        const name = (await api.getUserInfo(id))[id].name;
        const { bet } = room.players[id];
        msg += `- ${name} ${result === "x·ªâu" ? `+${bet * 2}` : `-${bet}`}\n`;
      }
    }

    // X√≥a ph√≤ng
    delete rooms[threadID];
    fs.writeFileSync(dataPath, JSON.stringify(rooms, null, 2));
    return api.sendMessage(msg, threadID, messageID);
  }

  return api.sendMessage("Sai c√∫ ph√°p! D√πng: tx [cr|info|x·ªï|out]", threadID, messageID);
};
